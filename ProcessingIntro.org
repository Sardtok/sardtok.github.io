#+OPTIONS: toc:nil email:nil H:4 num:nil ^:nil
#+TITLE: Introduksjon til Processing
#+AUTHOR: Rustam Mehmandarov og Sigmund Hansen
#+EMAIL: rm@computas.com sha@computas.com
#+REVEAL_THEME: night
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_EXTRA_CSS: bigsource.css

* Før vi begynner

- Har du lastet ned og pakket ut Processing?
- Hva er Processing?
- Hva er programmering?

* Ditt første program

- Start Processing
- Skriv inn følgende og kjør det ved å trykke på pilen:

#+BEGIN_SRC processing
void setup() {
  size(400, 400);
}

void draw() {
  rect(100, 100, 200, 200);
}
#+END_SRC

** Oppgaver

- Endre størrelsen på vinduet
- Endre størrelsen på firkanten
- Endre posisjonen til firkanten
- Tegn flere firkanter

* Ellipser

- src_processing{ellipse(x, y, bredde, høyde);} tegner en ellipse
- Skriv inn følgende og kjør den ved å trykke på pilen:

#+BEGIN_SRC processing
  ellipse(100, 100, 200, 200);
#+END_SRC

** Oppgaver

- Flytt sirkelen til midten av vinduet
- Tegn et ansikt med ellipser
  - Ikke bruk bare sirkler, men varier bredde og høyde

* Trekanter

- Tegn en trekant med:

#+BEGIN_SRC processing
triangle(x1, y1, x2, y2, x3, y3);
#+END_SRC

Her er ~x1~ og ~y1~ posisjonen til det første hjørnet

** Oppgaver

- Tegn tre trekanter som ser omtrent slik ut:

#+ATTR_HTML: :width 25%
[[./images/triforce.jpg]]

* Mangekanter

- Man kan tegne former med mange kanter om man vil:

#+BEGIN_SRC processing
  beginShape();
  vertex(10, 10); // Legg til et hjørne
  ... // Bytt ut ... med mange vertex-kall
  vertex(30, 50); // Legg til siste hørne
  endShape(CLOSE); // CLOSE - Koble sammen første og siste hjørne
#+END_SRC

** Oppgaver

- Legg til masse kanter og lag en form
- Hva skjer hvis du fjerner CLOSE?

* Variabler
#+ATTR_REVEAL: :frag (none none roll-in)
- Navngitte lagringsplasser for verdier
- Kan endre verdien under kjøring
- DYNAMIKK!!!

** Datatyper

- Angir alltid typen: \\
  ~type navn = startverdi;~
- Til nå bare tall
- La oss se på noen spesielle typer:

*** Heltall
- ~int~ (kort for integer)
- Tall uten desimaler

#+BEGIN_SRC processing
int a = 5;
#+END_SRC

*** Flyttall
- ~float~ (kort for floating point number)
- Tall med desimaler
- Ikke helt presise (7,2 siffer?!?)
- Nyttig til jevne bevegelser

#+BEGIN_SRC processing
float pi = 3.14;
#+END_SRC

*** Boolske verdier
- ~boolean~ (etter George Boole)
- Sannhetsverdier
- En verdi som er sann (~true~)
  eller usann (~false~)
- Nyttig for av-og-på-tilstander

#+BEGIN_SRC processing
boolean awesome = true;
#+END_SRC

*** Tegn
- ~char~ (kort for character)
- Bokstaver, tall og andre symboler
- Nyttig til håndtering av tastetrykk

#+BEGIN_SRC processing
char c = 'c';
#+END_SRC

*** Strenger (tekst)
- ~String~ (en streng med tegn)
- En sammensatt datatype

#+BEGIN_SRC processing
String text = "Can I haz cheezeburger?";
#+END_SRC

*** Farger
- ~color~
- Egentlig en ~int~
- Består av rød, grønn og blå
- Eventuelt også ugjennomsiktighet \\
  (opacity - alpha)

#+BEGIN_SRC processing
color c1 = #ff8040;
color c2 = color(255, 128, 64);
#+END_SRC

** Oppgaver

- Hvor kan du ellers bruke variabler i programmet under?
- Hvilke datatyper vil du bruke på de forskjellige stedene?

#+BEGIN_SRC processing
float x = 200.0;

void setup() {
  size(400, 400);
}

void draw() {
  ellipse(x, 200, 50, 50);
}
#+END_SRC

* Bevegelse
- Endring fra bilde til bilde
- Koden i ~draw~ kjører omtrent hvert 16. millisekund
- Ved å endre variabler, får vi bevegelser

#+BEGIN_SRC processing
float x = 200;
float y = 200;

void setup() {
  size(400, 400);
}

void draw() {
  background(0);
  x = x + 2.5;
  y = y - 1.5;
  ellipse(x, y, 50, 50);
}
#+END_SRC

** Oppgaver
- Hva skjer hvis du fjerner ~background(0);~?
- Kan du få sirkelen til å:
  - Bevege seg nedover til venstre?
  - Vokse eller krympe?
  - Aksellerere eller bremse opp?

* Reagere på tilstander
- Ballen forsvinner ut av vinduet
- Vi må gjøre noe når den når kanten
- Betingelsessetninger løser problemet
- Men vi trenger å bruke variabler for retning/fart

#+BEGIN_SRC processing
float xSpeed = 2.5;
float ySpeed = 1.5;
...
  x = x + xSpeed;
  y = y + ySpeed;
...
#+END_SRC

** Hvis A, så B
- Lar oss gjøre B bare når A er sant:

#+BEGIN_SRC processing
...
x = x + xSpeed;
y = y + ySpeed;

if (x > width - 25) {
  x = width - 25;
  xSpeed = -xSpeed;
}
...
#+END_SRC

*** Oppgaver
- Kan du få ballen til å snu når den treffer bunnen også?

** Hvis A, så B, ellers C
- Lar oss gjøre B når A er sant, og C når det er usant:

#+BEGIN_SRC processing
  x = x + xSpeed;
  y = y + ySpeed;

  if (x > width - 25) {
    background(#ff0000);
    x = width - 25;
    xSpeed = -xSpeed;
  } else {
    background(0);
  }
#+END_SRC

** Hvis A, så B, eller hvis ...
- Lar oss reagere på forskjellige tilstander,
  men bare på det første av uttrykkene som er sanne:

#+BEGIN_SRC processing
if (x > width - 25) {
  x = width - 25;
  xSpeed = -xSpeed;
} else if (x < 25) {
  x = 25;
  xSpeed = -xSpeed;
}
#+END_SRC

*** Oppgaver
- Få ballen til å sprette i bunnen og toppen også!

* Sammensatte datatyper

- Typer som ikke har en spesiell plass
- Du kan lage dine egne
- Det finnes mange slike
- Processings egne begynner typisk med stor P: \\
  PShape, PImage, osv.
- Vi kommer tilbake til disse senere
