#+OPTIONS: toc:nil H:4 num:nil ^:nil reveal_title_slide:"<h1>%t</h1><h2>%a</h2>"
#+TITLE: Introduksjon til Processing
#+AUTHOR: Rustam Mehmandarov og Sigmund Hansen
#+REVEAL_THEME: night
#+REVEAL_EXTRA_CSS: bigsource.css

* Før vi begynner

- Har du lastet ned og pakket ut [[https://processing.org][Processing]]?
- Hva er Processing?
- Hva er programmering?

** Spesielle tegn

|-------+-------------------+-----------------|
| Tegn  | Windows           | Mac             |
|-------+-------------------+-----------------|
| {     | AltGr + 7         | Alt + Shift + 8 |
| }     | AltGr + 0         | Alt + Shift + 9 |
| [     | AltGr + 8         | Alt + 8         |
| ]     | AltGr + 9         | Alt + 9         |
| \vert | Til venstre for 1 | Alt + 7         |
|-------+-------------------+-----------------|

* Ditt første program

- Start Processing
- Skriv inn følgende og kjør det ved å trykke på pilen:

#+BEGIN_SRC processing
void setup() {
  size(400, 400);
}

void draw() {
  background(0);
  rect(100, 100, 200, 200);
}
#+END_SRC

** Oppgaver

- Finn ut hva tallene gjør og:
- Endre størrelsen på vinduet
- Endre størrelsen på firkanten
- Endre posisjonen til firkanten
- Tegn flere firkanter
- Hva skjer hvis du fjerner ~background(0);~?

* Ellipser

- Tegn en ellipse med:

#+BEGIN_SRC processing
  ellipse(x, y, bredde, høyde);
#+END_SRC

** Oppgaver

- Tegn en sirkel midt i vinduet
- Tegn et ansikt med ellipser
  - Ikke bruk bare sirkler, men varier bredde og høyde

* Trekanter

- Tegn en trekant med:

#+BEGIN_SRC processing
triangle(x1, y1, x2, y2, x3, y3);
#+END_SRC

Her er ~x1~ og ~y1~ posisjonen til det første hjørnet

** Oppgaver

- Tegn tre trekanter som ser omtrent slik ut:

#+ATTR_HTML: :width 25%
[[./images/triforce.jpg]]

* Mangekanter

- Man kan tegne former med mange kanter om man vil:

#+BEGIN_SRC processing
  beginShape();
  vertex(10, 10); // Legg til et hjørne
  ... // Bytt ut ... med mange vertex-kall
  vertex(30, 50); // Legg til siste hørne
  endShape(CLOSE); // CLOSE - Koble sammen første og siste hjørne
#+END_SRC

** Oppgaver

- Legg til masse kanter og lag en form
- Hva skjer hvis du fjerner CLOSE?

* Variabler
#+ATTR_REVEAL: :frag (none none roll-in)
- Navngitte lagringsplasser for verdier
- Kan endre verdien under kjøring
- DYNAMIKK!!!

** Datatyper

- Angir alltid typen: \\
  ~type navn = startverdi;~
- Til nå bare tall
- Deles inn i primitive og sammensatte typer
- La oss se på noen typer:

*** Heltall
- ~int~ (kort for integer)
- Tall uten desimaler

#+BEGIN_SRC processing
int a = 5;
#+END_SRC

*** Flyttall
- ~float~ (kort for floating point number)
- Tall med desimaler
- Ikke helt presise (7,2 siffer?!?)
- Nyttig til jevne bevegelser

#+BEGIN_SRC processing
float pi = 3.14;
#+END_SRC

*** Boolske verdier
- ~boolean~ (etter George Boole)
- Sannhetsverdier
- En verdi som er sann (~true~)
  eller usann (~false~)
- Nyttig for av-og-på-tilstander

#+BEGIN_SRC processing
boolean awesome = true;
#+END_SRC

*** Tegn
- ~char~ (kort for character)
- Bokstaver, tall og andre symboler
- Nyttig til håndtering av tastetrykk

#+BEGIN_SRC processing
char c = 'c';
#+END_SRC

*** Strenger (tekst)
- ~String~ (en streng med tegn)
- En sammensatt datatype

#+BEGIN_SRC processing
String text = "Can I haz cheezeburger?";
#+END_SRC

*** Farger
- ~color~
- Egentlig en ~int~
- Består av rød, grønn og blå
- Eventuelt også ugjennomsiktighet \\
  (opacity - alpha)

#+BEGIN_SRC processing
color c1 = #ff8040;
color c2 = color(255, 128, 64);
...
// Brukes gjerne med:
background(c1);
fill(#4080ff);
stroke(128, 255, 64);
#+END_SRC

** Oppgaver

- Hvor kan du ellers bruke variabler i programmet under?
- Hvilke datatyper vil du bruke på de forskjellige stedene?

#+BEGIN_SRC processing
float x = 200.0;

void setup() {
  size(400, 400);
}

void draw() {
  background(0);
  ellipse(x, 200, 50, 50);
}
#+END_SRC

* Bevegelse
- Endring fra bilde til bilde
- Koden i ~draw~ kjører omtrent hvert 16. millisekund
- Ved å endre variabler, får vi bevegelser

#+BEGIN_SRC processing
float x = 200;
float y = 200;

void setup() {
  size(400, 400);
}

void draw() {
  background(0);
  x = x + 2.5;
  y = y - 1.5;
  ellipse(x, y, 50, 50);
}
#+END_SRC

** Oppgaver
- Hva skjer hvis du fjerner ~background(0);~?
- Kan du få sirkelen til å:
  - Bevege seg nedover til venstre?
  - Vokse eller krympe?
  - Aksellerere eller bremse opp?

* Reagere på tilstander
- Ballen forsvinner ut av vinduet
- Vi må gjøre noe når den når kanten
- Betingelsessetninger løser problemet
- Men vi trenger å bruke variabler for retning/fart

#+BEGIN_SRC processing
float xSpeed = 2.5;
float ySpeed = 1.5;
...
  x = x + xSpeed;
  y = y + ySpeed;
...
#+END_SRC

** Hvis A, så B
- Lar oss gjøre B bare når A er sant:

#+BEGIN_SRC processing
...
x = x + xSpeed;
y = y + ySpeed;

if (x > width - 25) {
  x = width - 25;
  xSpeed = -xSpeed;
}
...
#+END_SRC

*** Oppgaver
- Kan du få ballen til å snu når den treffer bunnen også?

** Hvis A, så B, ellers C
- Lar oss gjøre B når A er sant, og C når det er usant:

#+BEGIN_SRC processing
  x = x + xSpeed;
  y = y + ySpeed;

  if (x > width - 25) {
    background(#ff0000);
    x = width - 25;
    xSpeed = -xSpeed;
  } else {
    background(0);
  }
#+END_SRC

** Hvis A, så B, eller hvis ...
- Lar oss reagere på forskjellige tilstander,
  men bare på det første av uttrykkene som er sanne:

#+BEGIN_SRC processing
if (x > width - 25) {
  x = width - 25;
  xSpeed = -xSpeed;
} else if (x < 25) {
  x = 25;
  xSpeed = -xSpeed;
}
#+END_SRC

*** Oppgaver
- Få ballen til å sprette i bunnen og toppen også!

* Tastatur
- Kan håndtere når:
  - En tast trykkes inn
  - En tast slippes

** Tast trykkes inn
#+BEGIN_SRC processing
void keyPressed() {
  if (key == 'a') {
    x = x - 2.5;
  }

  if (keyCode == LEFT) {
    x = x - 2.5;
  }
}
#+END_SRC

** Tasterepetisjon
- Koden over virker takket være tasterepetisjon
- Må vente lenge før det begynner
- Hakker
- Kan bruke boolske variabler til å holde rede på tilstanden:

#+REVEAL: split

#+BEGIN_SRC processing
boolean left;
...
void keyPressed() {
  if (key == 'a') {
    left = true;
  }
...
}

void draw() {
  if (left) {
    x = x - 2.5;
  }
...
}
#+END_SRC

*** Oppgaver
- Legg til variabler for høyre, opp og ned
- Sett dem til sanne når passende taster trykkes inn
- Sett og oppdater xSpeed og ySpeed basert på variablene
- Hva mangler?

** Tast slippes opp
- Vi må også reagere på at tasten slippes
- Gjør som regel akkurat det motsatte av ~keyPressed~
- Kan derfor kopiere koden og oppdatere variabler motsatt:

#+BEGIN_SRC processing
void keyReleased() {
  if (key =='a') {
    left = false;
  }
...
}
#+END_SRC

*** Oppgaver
- Skriv ferdig koden i ~keyReleased~ \\
  sånn at du kan styre ballen med tastaturet.

* Mus
- Musposisjon i egne variabler:
  - ~mouseX~
  - ~mouseY~
- Musetrykk håndteres som tastetrykk:
  - ~mouseClicked~ - Klikk
  - ~mousePressed~ - Knapp trykket inn
  - ~mouseReleased~ - Knapp sluppet opp
  - Og flere andre (se [[https://processing.org/reference/][hjelpesidene til Processing]])

#+BEGIN_SRC processing
ellipse(mouseX, mouseY, 50, 50);
#+END_SRC

** Oppgaver

- Endre fargen på sirkelen når museknappen er trykket inn.
  Husk at fargen skal gå tilbake til hvit når museknappen er sluppet opp. \\
  Hint: ~fill(farge)~ setter fargen på det du skal tegne.

* Sammensatte datatyper

- Typer som ikke har en spesiell plass
- Typisk bygget opp av flere variabler
- Kan ha "oppførsel"
- Du kan lage dine egne
- Det finnes mange slike fra før
- Processings egne begynner typisk med stor P: \\
  PShape, PImage, osv.

** Bilder

- Lag en mappe som heter data i prosjektmappen
- Lagre bildefilen her
- Bilder kan ikke lastes inn før ~setup~
- Laste inn og tegne bilder:

#+BEGIN_SRC processing
PImage bilde;

void setup() {
  size(400, 400);
  bilde = loadImage("bilde.png");
}

void draw() {
  background(0);
  image(bilde, 200, 200);
}
#+END_SRC

*** Oppgaver

- Hva skjer om du fjerner innlastingen?
- Midtstill bildet:
  - Slå opp ~imageMode~ i referansen
  - Legg til et kall på ~imageMode~ i ~setup~

** Egendefinerte typer

- Sammensatte typer lages av klasser
- Når vi lager noe av denne typen kalles de objekter
- Kan minne om Platons idélære
- Det kan være lurt å lage en egen fane for hver type
- Vi kan definere egne typer med:

#+BEGIN_SRC processing
class TypeNavn {
...
}
#+END_SRC

*** Variabler

- Ser ut som vanlig
- Plasseres mellom krøllparentesene

#+BEGIN_SRC processing
class Ball {
  float x;
  float y;
}
#+END_SRC

*** Konstruktør

- Brukes til å opprette objekter av klassen
- Har samme navn som klassen

#+BEGIN_SRC processing
class Ball {
  float x;
  float y;

  Ball(float x, float y) {
    this.x = x;
    this.y = y;
  }
}
#+END_SRC

*** Oppførsel

- Kan lage metoder
  - ~setup~, ~draw~ er metoder du har sett før
- Kan være lurt med egen ~draw~-metode

#+BEGIN_SRC  processing
class Ball {
...
  void draw() {
    ellipse(x, y, 50, 50);
  }
}
#+END_SRC

*** Bruke objekter

#+BEGIN_SRC processing
Ball ball = new Ball(200, 200);
...
void draw() {
  background(0);
  ball.draw();
}
#+END_SRC

*** Oppgaver

- Legg til hastighet i ballen og spretting i kantene

* Lister

- Den enkleste varianten er en spesiell type
  - Kalles array
  - Krever mer manuell jobb
- Det finnes varianter som er sammensatte typer:
  - ArrayList, LinkedList, etc.
- La oss se på den første:

** Opprette

- Må angi antall elementer i listen
- Alle verdiene er satt til det som tilsvarer ~0~ \\
  Dette fører ofte til feil i programmer

#+BEGIN_SRC processing
float[] floatList = new float[100];
Ball[] balls = new Ball[10];
#+END_SRC

** Sette verdier

- Får tilgang til elementer med klammer og nummer i listen
- Nummer i listen begynner på ~0~ og slutter på ~antall - 1~
- Kan bruke regnestykker til indeks
- Merk at ~length~ er en variabel i alle slike lister
  som gir oss hvor mange plasser som finnes

#+BEGIN_SRC processing
floatList[0] = 3.14;
balls[9] = new Ball();
floatList[floatList.length - 1] = 99.9;
#+END_SRC

** Løpe gjennom og bruke

- Kan bruke en veldig enkel løkke hvis
  - Vi bare trenger verdien
  - Ikke skal endre på listen
  - Bare skal bruke elementer fra én liste
- Må bruke en litt mer tungvint variant ellers

*** For-each-løkke

- Skrives ~for (Type navn : liste)~
- Leses for hver Type, navn, i liste
- Koden under kan da leses: \\
  for hver Ball, ball, i balls, draw ball

#+BEGIN_SRC processing
for (Ball ball : balls) {
  ball.draw();
}
#+END_SRC

*** For-løkke

- Nyttig med primitive typer
- Kan brukes til andre ting enn lister

#+BEGIN_SRC processing
for (int i = 0; i < floatList.length; i++) {
  floatList[i] += 0.1;
}
#+END_SRC

** Oppgaver

- Lag en liste med baller og få dem til å sprette rundt i vinduet

* Nyttige lenker

- https://oppgaver.kidsakoder.no - Oppgave brukt av Lær Kidsa Koding, tar også for seg andre språk
- http://vestera.as/processing - Prøv Processing i nettleseren med mange små oppgaver
